0 0
label Loopy Loopsus
-

1 0
points 1 Card
question Write a loop that will compute the sum of squares of the numbers 13 to 24
-

2 0
points 2 Cards
question Convert the following for loop to a while loop
code
int n; boolean found;
for(n=1028, found=false; !found; n--){
  if(n % 33 == 0){
    found = true;
  }
}
--
-
 
3 0
points 4 Cards
question Write a method called max3array() which takes three arrays of doubles. If the lengths of the three arrays are not the same, throw a RuntimeException. Otherwise, allocate a new array of the same size and fill its elements with the maximum value of the corresponding elements in each of the three parameter arrays. The main() method below demonstrates the use of max3().
code
import java.util.Arrays;
public class Max3{
  public static void main(String [] args){
    double [] a = {1.5, 3.4, 6.2, 7.1};
    double [] b = {0.4, 3.1, 7.7, 9.1};
    double [] c = {1.1, 4.0, 6.5, 4.3};
    double [] abc = max3array(a,b,c);
    System.out.println(Arrays.toString(abc));
    // [1.5, 4.0, 7.7, 9.1]
    double [] x = {5.1, 3.4, 2.6, 7.1, 0.6};
    double [] y = {0.4, 1.3, 0.2, 1.9, 5.4};
    double [] z = {1.1, 0.4, 6.5, 4.3, 3.3};
    double [] xyz = max3array(x,y,z);
    System.out.println(Arrays.toString(xyz));
    // [5.1, 3.4, 6.5, 7.1, 5.4]
    double [] xbc = max3array(x,b,c);
    // Exception in thread "main"
    // java.lang.RuntimeException: Lengths not equal
  }
  // Method max3array defined below
--
-

0 1
label I/O You (cards)
-

1 1
points 1 Card
question The following code does not compile.  The compile error is below. Describe in a sentence how to fix the code.
code 
import java.util.Scanner;
public class IOError {
  public static void main(String args[]) throws Exception{
    String fileName = "data.txt";
    Scanner input = new Scanner(new File(fileName));
    String first = input.next();
    System.out.println("First word is"+first);
    input.close();
  }
}

lila [java-jeopardy]% javac IOError.java
IOError.java:5: error: cannot find symbol
    Scanner input = new Scanner(new File(fileName));
                                ^
  symbol:   method File(String)
  location: class IOError
1 error
--
answer Add "import java.io.File;" to the top of the code
-



2 1
points 3 Cards
question Write the body of a main method that will interactively prompt a user for their first and last name and then print their initials (first characters of first and last names).
--
-

3 1
points 4 Cards
question Define a static method charCount that takes a string parameter fileName, counts all non-newline characters in the named file, closes it, and returns the character count.  Examples of use are below.
code
import java.util.Scanner;
import java.io.File;
public class CountChars {
  public static void main(String args[]){
    String fileName = "data.txt";
    int nChar = charCount(fileName);
    System.out.printf("%d characters in file %s\n",
		      nChar,fileName);
    fileName = "data2.txt";
    nChar = charCount(fileName);
    System.out.printf("%d characters in file %s\n",
		      nChar,fileName);
  }
  // method charCount here
--
-

0 2
label Subjected to Object
-

1 2
points 1 Card
question Define a class Dog which has three public fields: an integer age, a boolean hasBone, and a String breed.  The Dog class has one constructor that takes these 3 parameters as arguments and sets the fields properly.
-

2 2
points 2 Cards
question  The Dog class has three fields: an integer age, a boolean hasBone, and a String breed.  Define a method mate which takes another Dog as an argument. A new dog is returned as an answer to the mate method.  The new dog has age zero, starts life without a bone, and has a mixed breed. Examples are below, format the breed string according to them.
code
Dog mom = new Dog(4,true,"Lab");
Dog dad = new Dog(5,false,"Husky");
Dog kid = mom.mate(dad);
// kid.breed is "Lab/Husky"
Dog mistress = new Dog(3,false,"Poodle");
Dog oops = dad.mate(mistress);
// oops.breed is "Husky/Poodle"
--
-

3 2
points 3 cards
question The Dog class has three fields: an integer age, a boolean hasBone, and a String breed.  Define an equals method for the Dog class which takes an Object other as a parameter and returns true if this Dog is equal to the other Object.  Dogs are only equal to other Dogs and only when the other Dog has the same age, the same hasBone value, and the same breed.
-

0 3
label Put in this box, Point at that Box
-

1 3
points 1 Card
question Draw a memory diagram for the following code when execution is stopped at the point indicated.
code
public static void main(String args[]){
  int a[] = new int[]{4,5,2};
  int b[] = a;
  // Draw the state of memory at this point
  ...
--
-

2 3
points 2 Cards
question The code below uses the Coord class which was discussed in class. The class has two integer fields, row and col, a 2-parameter constructor which sets these fields, and an equals() method which deeply checks whether the two Coords are equal.  Draw a memory diagram for the following code when execution is stopped at the point indicated.  
code 
public static void main(String args[]){
  Coord a = new Coord(8,9);
  Coord b = new Coord(4,2);
  Coord [] ca = new Coord[4];
  ca[0] = b;
  ca[1] = new Coord(4,2);
  ca[3] = a;
  // Draw the state of memory at this point
  ...
--
-

3 3
points 3 Cards
question Determine what is printed by the following code.
code 
String s1="Dude", s2="Sweet";
String [] sa = new String[]{"Dude",s2,s1,"Sweet",s1};
if(sa[0] == s1){
  System.out.println("1");
}
if(sa[1] == s2){
  System.out.println("2");
}
if(sa[2].equals(s2)){
  System.out.println("3");
}
if(sa[3].equals(s2)){
  System.out.println("4");
}
--
answer 24
-

0 4
label I'm nothing like my parents!
-

1 4
points 1 Card
question The following code attempts to implement a RepeatedWriter which extends PrintWriter and allows for single println(..) calls to repeatedly write lines to a destination.  Some of the compile bugs are below.  Describe how to fix the code so it compiles and functions as intended.
code
import java.io.*;
public class RepeatedWriter extends PrintWriter{
  private int repeats;
  public RepeatedWriter(OutputStream o, int r){
    this.repeats = r;
  }
  public RepeatedWriter(File f, int r) {
    this.repeats = r;
  }
  public void println(String s){
    for(int i=0; i<this.repeats; i++){
      super.println(s);
      super.flush();
    }
  }
}
aphaedrus [java-jeopardy]% javac RepeatedWriter.java
RepeatedWriter.java:4: error: no suitable constructor
found for PrintWriter(no arguments)
  public RepeatedWriter(OutputStream o, int r){
                                              ^
    constructor PrintWriter.PrintWriter(Writer) is not applicable
      (actual and formal argument lists differ in length)
--
-

2 4
points 2 Cards
question Determine whether or not the main method below compiles. If there are compile problems, describe all of them.  If there are no compile problems, show what is printed when main() is run.
code
abstract class A{                  class B extends A{                           
  private String as;                 int times;                                 
  public A(String s){                public B(String s, int t){                 
    this.as = s;                       super(s);                                
  }                                    this.times = t;                          
  abstract public void scream();     }                                          
}                                    public void scream(){                      
                                       String expr = String.toUpperCase(as);    
                                       for(int i=0; i<times; i++){              
                                         System.out.println(expr);              
                                       }                                        
                                     }                                          
                                   }                                            

public class Hierarchy{
  public static void main(String args[]){
    A a1 = new A("stella");
    a1.scream();
    
    A b1 = new B("adrian",3);
    b1.scream();
  }
}
--
answer as has private access in A, not viewable by child class B; A is abstract and cannot be instantiated in main()
-

3 4
points 3 Cards
question Implement an UnreliableWriter which extends PrintWriter.  An UnreliableWriter can be constructed to write to either an OutputStream like System.out or a File.   Every third call to UnreliableWriter's println(..) method does not actually write the requested output to the destination. UnreliableWriter does not override any other methods from PrintWriter.  Example uses are below.
code
public static void main(String args[]) throws Exception{
  UnreliableWriter out = new UnreliableWriter(System.out);
  out.println("Now you see it"); // prints to screen
  out.println("You still see it"); // prints to screen
  out.println("Now you don't"); // fails to print
  out.println("You can see it again"); // prints now
}
--
-
